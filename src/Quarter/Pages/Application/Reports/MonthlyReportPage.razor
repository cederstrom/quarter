@page "/app/reports/month/"
@page "/app/reports/month/{SelectedDate:datetime}"
@attribute [Authorize]

@using Quarter.Components
@using Quarter.Core.Queries
@using Quarter.Core.Repositories
@using Quarter.Core.UI.State
@using Quarter.Core.Utils
@using Quarter.Services
@using Quarter.State
@using Quarter.Utils

<ApplicationPage>
    <PageContent>
        <PageContext Tabs="@_tabs"/>
        <PageColumns>
            <ContextContent>
            </ContextContent>
            <MainContent>
                <div class="qa-report">
                    <div class="qa-report__header">
                        <div class="qa-report__header__title">
                            <div class="qa-report__header__title__main" test="report-title">@ReportTitle</div>
                            <div class="qa-report__header__title__sub" test="report-sub-title">@ReportSubTitle</div>
                        </div>
                        <div class="qa-report__header__actions">
                            <ActionButton IconRef="#icon-chevron-left" OnAction="@PreviousMonth" />
                            <ActionButton IconRef="#icon-chevron-right" OnAction="@NextMonth" />
                        </div>
                    </div>
                    <div class="qa-report__summary">
                        <div class="qa-report__summary__value" test="report-total-hours">@TotalHours</div>
                        <div class="qa-report__summary__label">Hours</div>
                    </div>
                    <div class="qa-report__details">
                        @if (IsEmpty())
                        {
                            <EmptyCollectionMessage Header="No registered time" Message="There are no registered time for this month." IconRef="#icon-manage"/>
                        }
                    </div>
                </div>
            </MainContent>
            <ToolbarContent></ToolbarContent>
        </PageColumns>
    </PageContent>
</ApplicationPage>

@inherits Quarter.Core.UI.Components.QuarterComponent<Quarter.State.ApplicationState>
@inject IQueryHandler _queryHandler
@inject NavigationManager _navigationManager
@inject IUserAuthorizationService _userAuthorizationService;

@code {
    [Parameter]
    public DateTime? SelectedDate { get; set; }

    private readonly List<TabData> _tabs = new()
    {
        new TabData("Weekly", Page.WeeklyReport),
        new TabData("Monthly", Page.MonhtlyReport),
    };

    private UsageOverTime? _usage;

    private string ReportTitle
        => _usage is null
            ? ""
            : _usage.From.DateTime.MonthAndYear();

    private string ReportSubTitle
        => _usage is null
            ? ""
            : $"{_usage.From.IsoString()} - {_usage.To.IsoString()}";

    private string TotalHours
        => _usage?.TotalMinutes.MinutesAsHours() ?? "";

    private bool IsEmpty()
        => _usage?.TotalMinutes == 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnParametersSetAsync();
        await DispatchAsync(new LoadProjects());

        SelectedDate ??= DateTime.UtcNow.Date;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var oc = await OperationContextForCurrentUser();
        _usage = await _queryHandler.ExecuteAsync(new MonthlyReportQuery(StartOfMonth()), oc, default);
    }

    private async Task<OperationContext> OperationContextForCurrentUser()
    {
        var currentId = await _userAuthorizationService.CurrentUserId();
        return new OperationContext(currentId);
    }

    private Date StartOfMonth()
        => new Date(SelectedDate ?? DateTime.UtcNow.Date).StartOfMonth();

    private void PreviousMonth()
        => _navigationManager.NavigateTo(Page.MonthlyReport(StartOfMonth().DateTime.AddMonths(-1)));

    private void NextMonth()
        => _navigationManager.NavigateTo(Page.MonthlyReport(StartOfMonth().DateTime.AddMonths(1)));
}