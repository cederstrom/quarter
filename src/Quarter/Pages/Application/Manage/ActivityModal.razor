@using Quarter.Components
@using Quarter.Core.Models
@using Quarter.State
@using Quarter.State.Forms

@inherits Quarter.Core.UI.Components.QuarterComponent<Quarter.State.ApplicationState>

<Modal Title="@ModalTitle">
    <EditForm Model="@FormData" OnValidSubmit="@OnConfirm" class="q-form-pane" test="add-activity-modal">
            <DataAnnotationsValidator/>
            <fieldset>
                <div class="q-form-pane--details">
                    <label for="activity-name">Name</label>
                    <div class="q-fine-print">The name that identifies the activity</div>
                </div>
                <div class="q-form-pane--controls">
                    <InputText id="activity-name"
                               name="activity-name"
                               placeholder="Anything"
                               @bind-Value="FormData.Name"
                               test="activity-name"/>
                    <ValidationMessage For="@(() => FormData.Name)" test="activity-name-validation"/>
                </div>
            </fieldset>
            <fieldset>
                <div class="q-form-pane--details">
                    <label for="activity-description">Description</label>
                    <div class="q-fine-print">A short description of the activity</div>
                </div>
                <div class="q-form-pane--controls">
                    <InputTextArea id="activity-description"
                                   name="activity-description"
                                   placeholder="Something"
                                   @bind-Value="FormData.Description"
                                   test="activity-description"/>
                </div>
            </fieldset>
            <fieldset>
                <div class="q-form-pane--details">
                    <label for="activity-color">Color</label>
                    <div class="q-fine-print">A color that identifies the activity</div>
                </div>
                <div class="q-form-pane--controls">
                    <div class="q-inline-controls">
                        <div class="q-color-input-marker"
                             style="background-color: @FormData.Color"
                             test="activity-color-marker"></div>
                        <InputText id="activity-color" name="activity-color" placeholder="#ca1244" test="activity-color"
                                   @bind-Value="FormData.Color"/>
                        <ActionButton IconRef="#icon-refresh" OnAction="RandomColor"></ActionButton>
                    </div>
                    <ValidationMessage For="@(() => FormData.Color)" test="activity-color-validation"/>
                </div>
            </fieldset>
            <fieldset class="q-form-pane--actions">
                <button type="button"
                        class="q-button q-button--ghost"
                        test="cancel-button"
                        @onclick="@OnCloseModal">Cancel</button>
                <button type="submit"
                        class="q-button q-button--primary"
                        test="confirm-button">@(IsCreateMode() ? "Create" : "Save")</button>
            </fieldset>
    </EditForm>
</Modal>

@code {
    [Parameter]
    public ActivityFormData FormData { get; set; } = new ();

    [Parameter]
    public string ModalTitle { get; set;} = String.Empty;

    [Parameter]
    public IdOf<Project> ProjectId { get; set; } = IdOf<Project>.None;

    [Parameter]
    public IdOf<Activity>? ActivityId { get; set; }

    private readonly Random _random = new Random();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (FormData.Color.Length == 0)
            RandomColor();
    }

    private bool IsCreateMode()
        => ActivityId is null;

    private Task OnConfirm()
        => DispatchAsync(ActivityId is null
            ? new AddActivityAction(ProjectId, FormData)
            : new EditActivityAction(ProjectId, ActivityId, FormData));

    private Task OnCloseModal()
        => DispatchAsync(new CloseModalAction());

    private void RandomColor()
        => FormData.Color = $"#{_random.Next(0x1000000):X6}"; // I.e. FFFFFF + 1
}