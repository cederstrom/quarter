@using Quarter.Components
@using Quarter.Core.Models
@using Quarter.Core.Utils
@using Quarter.State
@using Quarter.State.ViewModels
@using Quarter.Utils

<div class="qa-list-item @((_isActive) ? "qa-list-item--is-active" : "")"
     test="project-list-item">

    <div class="qa-list-item__main">
        <div class="qa-list-item__main__title">
            <div class="qa-list-item__main__text"
                 @onclick="@ToggleActive"
                 test="project-title">
                @if (_isActive)
                {
                    <span class="qa-list-item__main__chevron" test="collapse-icon">@CollapseIcon</span>
                }
                else
                {
                    <span class="qa-list-item__main__chevron" test="expand-icon">@ExpandIcon</span>
                }
                @Project?.Name
                @if (Project?.IsArchived == true)
                {
                    <span class="qa-tag" test="archived-tag">Archived</span>
                }
            </div>
            <div class="qa-list-item__main__sub" test="project-description">@Project?.Description</div>
        </div>
        <div class="qa-list-item__main__actions">
            <ContextMenu Items="_menuItems" ItemSelected="OnProjectMenuItem" IsInverted="_isActive"></ContextMenu>
        </div>
    </div>
    <div class="qa-list-item__statistics">
        <div class="qa-list-item__statistics__category" test="project-category">
            <div class="qa-list-item__statistics__unit" test="project-unit">Hours</div>
            <div class="qa-list-item__statistics__value" test="project-value">@Project?.TotalMinutes.MinutesAsHours()</div>
        </div>
        <div class="qa-list-item__statistics__category" test="project-category">
            <div class="qa-list-item__statistics__unit" test="project-unit">Activities</div>
            <div class="qa-list-item__statistics__value" test="project-value">@ActivityCount</div>
        </div>
        <div class="qa-list-item__statistics__category qa-not-xs" test="project-category">
            <div class="qa-list-item__statistics__unit" test="project-unit">Updated at</div>
            <div class="qa-list-item__statistics__value" test="project-value">@UpdatedAt</div>
        </div>
        <div class="qa-list-item__statistics__category qa-not-xs" test="project-category">
            <div class="qa-list-item__statistics__unit" test="project-unit">Last used at</div>
            <div class="qa-list-item__statistics__value" test="project-value">@LastUsed</div>
        </div>
    </div>
    @if (_isActive)
    {
        <ActivityTable Project="Project" />
    }
</div>

@inherits Quarter.Core.UI.Components.QuarterComponent<Quarter.State.ApplicationState>

@code {
    [Parameter]
    public ProjectViewModel? Project { get; set; }

    private bool _isActive = false;

    private string ActivityCount
        => Project?.Activities.Count.ToString() ?? "-";

    private MarkupString ExpandIcon
        => new MarkupString(@$"<svg class=""qa-icon--small""><use xlink:href=""#icon-plus-sm""></use></svg>");

    private MarkupString CollapseIcon
        => new MarkupString(@$"<svg class=""qa-icon--small""><use xlink:href=""#icon-minus-sm""></use></svg>");

    private string UpdatedAt
        => Project?.Updated is null
            ? "-"
            : Project.Updated.Value.DateTime.ToString("yyyy-MM-dd HH:mm:ss");

    private string LastUsed
        => Project?.LastUsed is null || Project.LastUsed.Value.DateTime == DateTime.MinValue
            ? "-"
            : Project.LastUsed.Value.DateTime.ToString("yyyy-MM-dd HH:mm:ss");

    private List<ContextMenu.MenuItemVm> _menuItems = new List<ContextMenu.MenuItemVm>
    {
        new("edit", "Edit project"),
        new("archive", "Archive project"),
        new("remove", "Remove project"),
    };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateArchiveRestoreMenuItems();
    }

    private void ToggleActive()
        => _isActive = !_isActive;

    private async Task OnProjectMenuItem(ContextMenu.MenuItemVm item)
    {
        var res = item.Type switch {
               "edit" => DispatchAsync(new ShowEditProjectAction(Project!.Id)),
            "archive" => DispatchAsync(new ShowArchiveProjectAction(Project!.Id)),
            "restore" => DispatchAsync(new ShowRestoreProjectAction(Project!.Id)),
                    _ => DispatchAsync(new ShowRemoveProjectAction(Project!.Id))
        };

        await res;
    }

    private void UpdateArchiveRestoreMenuItems()
    {
        if (Project is null) return;

        var menuItem = Project.IsArchived
            ? new ContextMenu.MenuItemVm("restore", "Restore project")
            : new ContextMenu.MenuItemVm("archive", "Archive project");
        _menuItems.RemoveAt(1);
        _menuItems.Insert(1, menuItem);
    }
}
