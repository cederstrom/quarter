@using Quarter.Components
@using Quarter.Core.Models
@using Quarter.State
@using Quarter.State.Forms

@inherits Quarter.Core.UI.Components.QuarterComponent<Quarter.State.ApplicationState>

<Modal Title="@ModalTitle">
    <EditForm Model="@FormData" OnValidSubmit="@OnConfirm" class="q-form-pane" test="add-project-modal">
        <DataAnnotationsValidator/>
        <fieldset>
            <div class="q-form-pane--details">
                <label for="project-name">Name</label>
                <div class="q-fine-print">The name that identifies the project</div>
            </div>
            <div class="q-form-pane--controls">
                <InputText id="project-name"
                           name="project-name"
                           placeholder="Restyling web site"
                           @bind-Value="FormData.Name"
                           test="project-name"/>
                <ValidationMessage For="@(() => FormData.Name)" test="project-name-validation"/>
            </div>
        </fieldset>
        <fieldset>
            <div class="q-form-pane--details">
                <label for="project-description">Description</label>
                <div class="q-fine-print">A short description of the project</div>
            </div>
            <div class="q-form-pane--controls">
                <InputTextArea id="project-description"
                           name="project-description"
                           placeholder="Centering divs"
                           @bind-Value="FormData.Description"
                           test="project-description"/>
            </div>
        </fieldset>
        <fieldset class="q-form-pane--actions">
            <button type="button"
                    class="q-button q-button--ghost"
                    test="cancel-button"
                    @onclick="@OnCloseModal">Cancel</button>
            <button type="submit"
                    class="q-button q-button--primary"
                    test="confirm-button">@(IsCreateMode() ? "Create" : "Save")</button>
        </fieldset>
    </EditForm>
</Modal>

@code {
    [Parameter]
    public ProjectFormData FormData { get; set; } = new ();

    [Parameter]
    public string ModalTitle { get; set;} = String.Empty;

    [Parameter]
    public IdOf<Project>? ProjectId { get; set; }

    private bool IsCreateMode()
        => ProjectId is null;

    private Task OnConfirm()
        => DispatchAsync(ProjectId is null
            ? new AddProjectAction(FormData)
            : new EditProjectAction(ProjectId, FormData) );


    private Task OnCloseModal()
        => DispatchAsync(new CloseModalAction());
}