@using Quarter.Components
@using Quarter.Core.Models
@using Quarter.State
@using Quarter.State.ViewModels
@using System.Net
@using System.Globalization

<div class="q-list-item q-ts-widget-summary">
    <div class="q-list-item__header">
        <span class="q-ts-summary-value" test="summary-total">@_summary.Total</span>
        <span class="q-ts-summary-unit">h</span>
    </div>
    @if (_summary.ProjectSummaries.Count > 0)
    {
        <div class="q-list-item__content">
            <table>
                <tbody>
                @foreach (var project in _summary.ProjectSummaries)
                {
                    <tr test="summary-project">
                        <th></th>
                        <th class="q-ts-summary-value-column" test="summary-total">@project.Total</th>
                        <th class="q-ts-summary-activity-column">
                            <span class="q-ts-summary-name" test="summary-name">@project.Name</span>
                            @if(project.IsArchived)
                            {
                                <span class="q-ts-summary-archived" test="summary-archived">
                                    <svg class="q-icon--s">
                                        <use xlink:href="#icon-archive"></use>
                                    </svg>
                                </span>
                            }
                        </th>
                    </tr>
                    @foreach (var activity in project.Activities)
                    {
                        <tr test="summary-activity">
                            <td class="q-ts-summary-marker-column">
                                <div class="q-activity-marker--color q-activity-marker__small"
                                     style="background-color: @activity.Color.BackgroundColor; border-color: @activity.Color.BorderColor;"
                                     test="activity-item-marker">
                                </div>
                            </td>
                            <td class="q-ts-summary-value-column" test="summary-total">@activity.Total</td>
                            <td class="q-ts-summary-activity-column">
                                <span class="q-ts-summary-name" test="summary-name">@activity.Name</span>
                                @if (activity.IsArchived)
                                {
                                    <span class="q-ts-summary-archived" test="summary-archived">
                                        <svg class="q-icon--s">
                                            <use xlink:href="#icon-archive"></use>
                                        </svg>
                                    </span>
                                }
                            </td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <EmptyCollectionMessage Header="" Message="No time registered." IconRef="#icon-clipboard"/>
    }
</div>

@inherits Quarter.Core.UI.Components.QuarterComponent<Quarter.State.ApplicationState>

@code {
    record ActivitySummary(string Name, string Total, ActivityColor Color, bool IsArchived);

    record ProjectSummary(string Name, string Total, ActivitySummary[] Activities, bool IsArchived);

    record Summary(List<ProjectSummary> ProjectSummaries, double TotalHours)
    {
        public string Total => TotalHours.ToString("F2", CultureInfo.InvariantCulture);
    }

    // Move these to state?
    private readonly Dictionary<IdOf<Project>, ProjectViewModel> _projectLookup = new Dictionary<IdOf<Project>, ProjectViewModel>();
    private readonly Dictionary<IdOf<Activity>, ActivityViewModel> _activityLookup = new Dictionary<IdOf<Activity>, ActivityViewModel>();

    private Summary _summary = new Summary(new List<ProjectSummary>(), 0);

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PopulateCaches();
        _summary = Summarize();
    }

    private void PopulateCaches()
    {
        // Project and activities cannot change while this is rendered.
        var isInitialed = _projectLookup.Any();
        if (isInitialed) return;
        if (State?.Projects is null) return;

        _projectLookup.Clear();
        _activityLookup.Clear();

        foreach (var p in State.Projects)
        {
            _projectLookup.Add(p.Id, p);

            foreach (var a in p.Activities)
            {
                _activityLookup.Add(a.Id, a);
            }
        }
    }

    private Summary Summarize()
    {
        var timesheet = State?.SelectedTimesheet;
        if (timesheet is null)
            return new Summary(new List<ProjectSummary>(), 0);

        var total = 0d;
        var summaries = timesheet.Summarize().Select(p =>
        {
            _projectLookup.TryGetValue(p.ProjectId, out var projectVm);
            var activities = p.Activities.Select(a =>
            {
                _activityLookup.TryGetValue(a.ActivityId, out var activityVm);

                var activityTotal = (a.Duration * 15.0) / 60.0;
                var activityColor = activityVm is not null
                    ? new ActivityColor(activityVm.Color, activityVm.DarkerColor)
                    : ApplicationState.DefaultActivityColor;
                return new ActivitySummary(activityVm?.Name ?? "Unknown", activityTotal.ToString("F2", CultureInfo.InvariantCulture), activityColor, activityVm?.IsArchived ?? false);
            }).ToArray();

            var projectTotal = (p.Duration * 15.0) / 60.0;
            total += projectTotal;
            return new ProjectSummary(projectVm?.Name ?? "Unknown", projectTotal.ToString("F2", CultureInfo.InvariantCulture), activities, projectVm?.IsArchived ?? false);
        });

        return new Summary(summaries.ToList(), total);
    }
}
